2014-09-18 22:13:55
当前目标：
能输入中英文
能换行（硬换行）
能自动换行（软换行）
不能删除
不能移动光标（只能在尾部插入）

2014-09-18 22:36:01
inputMethodEvent能够触发的条件是
QWidget.setAttribute(Qt.WA_InputMethodEnabled)
QWidget.hasFocus()

drawText() 可以自动wrap汉字，但对连续英文并不会
所以需要自己处理每个字符的绘制
text layout?

2015-01-28 21:20:13
重新开始，希望能每天写上一点，直到能开eno(目前的想法是edi写到富文本编辑器的地步就开eno)

好久以来重拾python手特别生，qt也是，，一步步来
简单目标：
[goal done]
按键能在窗口中显示英文

ctrl, shift 之类按键在 keyPressEvent() 的 .text() 是空字符串，所以验证是否 printable 需要：
if ch and ch in string.printable

[goal done]
添加 backspace、回车功能，在 console 中显示字符串，例如：
********************
*hello world       *
*this is a test    *
*                  *
********************
星号是模拟的窗口

ctrl-j 是 \r
ctrl-m 是 \n
backspace 是 0x08

\r 也在string.printable里(属于whitespace)，\n不属于，，那么对字符要优先判断是否是回车

2015-01-28 23:23:57
下一步比较复杂了(在widget中显示)，想做得好可能涉及到QTextLayout

貌似QTextLayout不会自己handle new line？那么 .createLine() 创建的原来不是文本中的“行(以换行符为界)”，而是paint device中的“行(以宽度为界)”？
让我试验一下

还真是

2015-01-28 23:59:21
done，不过写得比较乱——各种实验修修改改才ok起来，，不过可以在widget中显示英文了，backspace和回车也能用
接下来的任务或者搞中文或者仔细研究下QTextLayout
睡了

2015-01-29 12:46:27
很长的一行word wrap后，下面的行会与本行重合
另外，widget改变size后没有重新layout

把layout放在paintEvent里就可以保证widget size改变时重新layout

layout的boundingRect基本上只有width、height等有意义，多行layout时position要每一个加上上一layout的height

下面尝试一下更改word wrap的形式——改成字符wrap

QTextLayout不会handle tab——呃，好像是还有个QTextOption需要设置？

QTextDocument是更高层的工具，QTextLayout相当于只负责document中的一个element
但我不确定自己是不是要直接使用这么高层的工具，，更想自己从底层写起

通过QTextOption可以设置wrap mode


有点儿明白QTextLayout的意思了，它就像一个盒子，装了些字符，把它们排列起来
至于这个盒子往哪里画，仍是画的时候才指定的——也就是说，盒子中字符的位置都是相对的
上面是因为下一步打算做scroll，想了想琢磨出来的

恩...做scroll涉及到“保证哪个位置必须可见”的问题(呃，我是说正常打字的情况下，不用滚轮)，这就牵扯到光标，，那么下一步有好几项：

[goal]
光标
    delete、方向键
scroll (vertical - 因为图形行都会自动wrap)

顺便想远一点：
[goal]
中文支持
文件读写
行号
复制、粘贴
undo/redo
字体(字号)
背景色、前景色
edit/view
图片(view中是图片，edit中是文件地址或文件hash)
    进一步：资源链接
历史记录

到这里差不多就能转eno了，啊哈哈哈哈

2015-01-31 12:38:22
[goal]
光标
    光标的显示(尾部)(I型、block型) [done]
    键盘上下左右移动 [done]
    鼠标点选移动
    在光标处输入、删除(backspace、delete)
    
重构一下，做一个document的class

[goal]
cursor home/end/ctrl-home/ctrl-end
cursor next world/previous word

2015-01-31 14:09:21
鼠标点选光标做起来还比较复杂
需要根据确定坐标点在了哪个layout里，然后根据行高计算是第几行，拿到该行的QTextLine后根据x坐标确定cursor位置

可以想见之后做到富文本的时候，涉及到各种图形元素及排版，坐标 <-> 光标 互换会更复杂，，不过倒算明白做法了


要添加一个view类，用来管理document的layout、鼠标事件等等，，这个view一定要和document分开
因为一个document可以由多个view来显示，但一个view只能显示一个document
想想html里的document是树状结构，，咱们编辑器用的(目前来说)是以行为单位的结构(后期要加图片等其他元素也是加在行间或行内的)

等等..我觉着以后要做历史记录的话，树状(或以节点为元素的网状)结构可能才更方便
或者(历史记录)采取动作序列的方式？每隔几百/千步创建一个快照？(但这样岂不是会很占用存储空间)
或者把字符操作这种按时间段组合成一个大的操作，该操作的数据就近乎于最终文档里的text节点(大操作中可以保留部分小的“删除”字符的操作，此时这些字符是作为额外的节点保存)
这样重现操作时虽然不能像放录像一样还原当时的情景(这样太耗费存储空间了)，但是也相当于在粗粒度上保留了操作的历史(而且保证了精确)
它们的区别在于，比如你输入“homeworld”这个单词的时候，前者记录了每个字符的插入时间，而后者将整个单词作为一个插入动作(存储的数据是整个单词)，如果期间有删除的话，比如输入homee，删掉e，输入world，那么就是3个动作

还需要一个输入映射模块，用来把按键经自定义配置映射为操作命令(比如自定义ctrl-h为delback操作)，这个模块大约要做成一个状态机(因为后期可能要实现复杂快捷键序列)，涉及到编译原理的知识了
另外对文档数据的解析应该也会用到编原

2015-01-31 18:19:26
[goal]
Viewer
KeyManager

[goal]
custom cursor shape

[goal]
config
    default_config.py
    config.py
    
    设置光标闪烁时间等

2015-01-31 20:16:41
改变document的某些元素之后只需要在viewer中重新layout相应元素(而不必layout所有元素，这样太浪费)
但是怎么联系起这些元素和它们的layout呢？

设想一个文档示例：
**************************************************
\datetime{2015-01-31 20:20:12}

这是一个测试(这里是一行只有文字的element)
这里有图片\img{ref-type=hash inline=true ae365}，而且是inline的

这里是escaped内容：\text==={\img{test}===}
其中 ==={ 和 ===} 是自定义的开始与结束符，它们不在内容中出现
**************************************************

考虑到历史记录的话文档结构感觉无从下手，再想想，不行就先不管

恩...目测顺序结构(text, res, text, text...)这种就可以，历史记录先不管，图片也先不管，，只把文字的先做出来(这其实就是很简单的文档结构了，一堆lines就行了)

一个line对应一个layout，line中的字符改变了layout要relayout，几个line合成或删除会导致某些layouts的删除与某个layout的relayout
还要考虑到多个view对应一个document

似乎应该加一些controller，每个负责1个document与n个view的联系
document notify controller，然后由controller负责notify view 结构更改 与 relayout(这两样应该分开，因为比如在执行宏的时候，结构更改并不一定伴随着重绘)

cursor应该是属于view的(而非document)(或者说一个document可以有多个cursor)，这样才能实现类似vim的多窗口编辑同一个文件

一行里的多个光标如果靠字符index来标识的话，那么行首的光标删除首字符会导致之后的光标们的index都失效(需要全部减1)

http://stackoverflow.com/questions/5086699/real-time-collaborative-editing-how-does-it-work
http://en.wikipedia.org/wiki/Operational_transformation
关于multiple cursor, 这里提到类似的问题，不过它的更复杂，涉及多人实时编辑同一个文件
我自己要做的当然不至于到那种程度，但如果按那个标准做，之后可能涉及到的共享编辑同一个文件也就容易多了(如果做不出来也可以退一步做成非实时的，git那种吧)

多人实时编辑，想起来就挺带感，，刚才假想毕设做这个内容，演示可以这么弄：
自己先录制对一个文章的录入(英文的吧)，其中会产生拼写错误，但不改，只管录
之后重放这次录入，然后模拟第二个人的编辑，对其中的拼写错误进行纠正
再重放，第三个人把文中的一些引用加上url地址
再重放...
最后演示的时候，n色光标同时编辑一个文件(富文本就更帅了)


对eno来说，弱化了的编辑功能其实并不需要多光标支持
但edi作为一个编辑器来说必须是要的

还想到edi可以抽出文档结构与view与操作逻辑，这样切换一套就变成“文本编辑器”，再切换一套就变成“富文本编辑器”，还能切成图形编辑器、甚至游戏...

那edi本身干什么呢？就作为一个协调框架好了，，这种有个术语叫什么来着，好像是java的spring库的思想，查了下，ioc - inversion of control，就是实际逻辑交给开发者实现，功能的组合与协调由框架完成

恩..先不做多光标(因为目前的目标主要是为做eno打前奏)

不过cursor timer还是应该放在view里(cursor放在document里)

2015-01-31 22:56:36
重构，分出document, view, controller
